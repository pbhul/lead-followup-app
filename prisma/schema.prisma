generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(AGENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  leads         Lead[]
  campaigns     Campaign[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Lead {
  id        String     @id @default(cuid())
  firstName String
  lastName  String
  email     String
  phone     String
  source    LeadSource @default(OTHER)
  status    LeadStatus @default(NEW)
  notes     String?
  budget    Float?
  timeline  String?
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  calls     Call[]
  campaigns LeadCampaign[]

  @@index([status])
  @@index([source])
  @@index([createdAt])
}

model Call {
  id           String       @id @default(cuid())
  leadId       String
  status       CallStatus   @default(PENDING)
  duration     Int?
  recordingUrl String?
  transcript   String? @db.Text
  outcome      CallOutcome?
  scheduledAt  DateTime
  completedAt  DateTime?
  blandCallId  String?      @unique
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  lead Lead @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([scheduledAt])
}

model Campaign {
  id          String    @id @default(cuid())
  name        String
  description String?
  script      String @db.Text
  isActive    Boolean   @default(true)
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  steps CampaignStep[]
  leads LeadCampaign[]
}

model CampaignStep {
  id           String   @id @default(cuid())
  campaignId   String
  stepNumber   Int
  delayMinutes Int
  script       String @db.Text
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([campaignId, stepNumber])
}

model LeadCampaign {
  id                String    @id @default(cuid())
  leadId            String
  campaignId        String
  currentStep       Int       @default(0)
  isActive          Boolean   @default(true)
  nextScheduledCall DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  lead     Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([leadId, campaignId])
}

enum UserRole {
  ADMIN
  AGENT
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  SCHEDULED
  CLOSED
  LOST
}

enum LeadSource {
  OPEN_HOUSE
  WEBSITE
  REFERRAL
  FACEBOOK
  ZILLOW
  REALTOR_COM
  OTHER
}

enum CallStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum CallOutcome {
  QUALIFIED
  NOT_QUALIFIED
  CALLBACK_REQUESTED
  APPOINTMENT_SCHEDULED
  NO_ANSWER
  VOICEMAIL
  WRONG_NUMBER
}
